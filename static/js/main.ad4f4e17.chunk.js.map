{"version":3,"sources":["components/Card/Card.js","components/Board/Board.js","Deck.js","index.js","App.js"],"names":["Card","_ref","handleClick","disabled","solved","id","name","flipped","height","width","react_default","a","createElement","className","concat","style","onClick","src","alt","Board","dimension","cards","map","card","Card_Card","key","includes","initializeDeck","reduce","acc","push","sort","b","Math","random","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setCards","_useState3","_useState4","setFlipped","_useState5","_useState6","setDimension","_useState7","_useState8","setSolved","_useState9","_useState10","setDisabled","useEffect","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","forEach","Image","isMatch","clickedCard","find","resetCards","length","newGame","setTimeout","min","document","documentElement","clientWidth","clientHeight","Board_Board","toConsumableArray","href","target","rel","getElementById"],"mappings":"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","file":"static/js/main.ad4f4e17.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Card.css\";\r\n\r\nexport default function Card({\r\n  handleClick,\r\n  disabled,\r\n  solved,\r\n  id,\r\n  name,\r\n  flipped,\r\n  height,\r\n  width\r\n}) {\r\n  return (\r\n    <div\r\n      className={`flip-container ${flipped || solved ? \"flipped\" : \"\"}`}\r\n      style={{ width, height }}\r\n      onClick={() => (disabled ? null : handleClick(id))}\r\n    >\r\n      <div className=\"flipper\">\r\n        <img\r\n          className={flipped ? \"front\" : \"back\"}\r\n          style={{ width, height }}\r\n          src={flipped || solved ? `img/${name}.png` : `img/back.jpg`}\r\n          alt=\"Card\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  handleClick: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  flipped: PropTypes.bool.isRequired,\r\n  solved: PropTypes.bool.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Card from \"../Card\";\r\nimport \"./Board.css\";\r\n\r\nexport default function Board({\r\n  dimension,\r\n  cards,\r\n  flipped,\r\n  handleClick,\r\n  disabled,\r\n  solved\r\n}) {\r\n  return (\r\n    <div className=\"board\">\r\n      {cards.map(card => (\r\n        <Card\r\n          key={card.id}\r\n          id={card.id}\r\n          name={card.name}\r\n          width={dimension / 4.5}\r\n          height={dimension / 4.5}\r\n          flipped={flipped.includes(card.id)}\r\n          handleClick={handleClick}\r\n          solved={solved.includes(card.id)}\r\n          disabled={disabled || solved.includes(card.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nBoard.propTypes = {\r\n  dimension: PropTypes.number.isRequired,\r\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n  flipped: PropTypes.arrayOf(PropTypes.numbers).isRequired,\r\n  solved: PropTypes.arrayOf(PropTypes.numbers).isRequired,\r\n  handleClick: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool.isRequired\r\n};\r\n","function shuffleCards(array) {\r\n  const _array = array.sort(function(a, b) {\r\n    return 0.5 - Math.random();\r\n  });\r\n  return _array;\r\n}\r\n\r\nexport default function initializeDeck() {\r\n  let id = 0;\r\n  const cards = [\r\n    \"Aoi\",\r\n    \"Celeste\",\r\n    \"Chihiro\",\r\n    \"Junko\",\r\n    \"Kyoko\",\r\n    \"Maizono\",\r\n    \"Makoto\",\r\n    \"Toko\"\r\n  ].reduce((acc, name) => {\r\n    acc.push({\r\n      id: id++,\r\n      name\r\n    });\r\n    acc.push({\r\n      id: id++,\r\n      name\r\n    });\r\n    return acc;\r\n  }, []);\r\n  return shuffleCards(cards);\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board\";\nimport initializeDeck from \"./Deck\";\n\nexport default function App() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n\n  useEffect(() => {\n    preloadImages();\n  }, [cards]);\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener(\"resize\", resizeBoard);\n    return () => window.removeEventListener(\"resize\", resizeListener);\n  });\n\n  const preloadImages = () => {\n    cards.forEach(card => {\n      const src = `img/${card.name}.png`;\n      new Image().src = src;\n    });\n  };\n\n  const handleClick = id => {\n    if (flipped.includes(id)) return;\n    setDisabled(true);\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      setFlipped([flipped[0], id]);\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 1500);\n      }\n    }\n  };\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.name === clickedCard.name;\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    if (solved.length === 14) {\n      newGame();\n    } else setDisabled(false);\n  };\n\n  const newGame = () => {\n    setTimeout(function() {\n      setSolved([]);\n      setTimeout(function() {\n        setCards(initializeDeck());\n        setDisabled(false);\n      }, 600);\n    }, 2000);\n  };\n\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight\n      )\n    );\n  };\n\n  return (\n    <div>\n      <h1>Danganronpa Memory Game</h1>\n      <h2>Find the matching pairs</h2>\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n      />\n      <a\n        href=\"https://github.com/2juicy/match-2-game\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Source\n      </a>\n    </div>\n  );\n}\n"],"sourceRoot":""}